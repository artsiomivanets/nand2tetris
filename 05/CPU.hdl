// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    And16(a=instruction, b[0..15]=true, out[0..2]=jmp,  out[3]=M, out[4]=D, out[5]=A, out[6]=no, out[7]=f, out[8]=ny, out[9]=zy, out[10]=nx, out[11]=zx, out[12]=fromMemory, out[15]=cinstruction);

    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=nng, b=nzr, out=pos);
    Or(a=pos, b=zr, out=gtoe);
    Or(a=pos, b=ng, out=neq);
    Or(a=ng, b=zr, out=ltoe);

    Mux8Way16(a[0]=false, b[0]=pos, c[0]=zr, d[0]=gtoe, e[0]=ng, f[0]=neq, g[0]=ltoe, h[0]=true, sel=jmp, out[0]=shouldJMP);
    And(a=shouldJMP, b=cinstruction, out=loadPC);



    Mux(a=true, b=A, sel=cinstruction, out=loadARegister);
    Mux(a=false, b=D, sel=cinstruction, out=loadDRegister);
    Mux(a=false, b=fromMemory, sel=cinstruction, out=loadFromMemory);
    Mux(a=false, b=M, sel=cinstruction, out=writeM);


    Mux16(a=instruction, b=ALUOut, sel=cinstruction, out=aregin);

    ARegister(in=aregin, load=loadARegister, out=aregout, out[0..14]=addressM);

    DRegister(in=ALUOut, load=loadDRegister, out=ALUin0);

    Mux16(a=aregout, b=inM, sel=loadFromMemory, out=ALUin1);

    PC(in=aregout, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

    ALU(x=ALUin0, y=ALUin1, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outM, out=ALUOut, zr=zr, ng=ng);

}
